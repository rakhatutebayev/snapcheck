version: '3.8'

services:
  # üóÑÔ∏è PostgreSQL –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤–º–µ—Å—Ç–æ SQLite)
  db:
    image: postgres:15-alpine
    container_name: snapcheck-db
    environment:
      - POSTGRES_DB=snapcheck
      - POSTGRES_USER=snapcheck
      - POSTGRES_PASSWORD=${DB_PASSWORD:-SlideConfirm12345}
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: always
    networks:
      - snapcheck_snapcheck-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snapcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # üîÑ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î (–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û backend)
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: snapcheck-migrate
    command: sh -c "cd backend && alembic upgrade head && echo '‚úÖ Migrations completed'"
    environment:
      - DATABASE_URL=postgresql://snapcheck:${DB_PASSWORD:-SlideConfirm12345}@db:5432/snapcheck
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - snapcheck_snapcheck-net
    profiles:
      - donotstart  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ backend –∫–∞–∫: docker-compose run --rm db-migrate

  # üêç Backend API (FastAPI)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: snapcheck-backend
    environment:
      - DATABASE_URL=postgresql://snapcheck:${DB_PASSWORD:-SlideConfirm12345}@db:5432/snapcheck
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - LOG_LEVEL=info
      - WORKERS=4
    volumes:
      - ./data/uploads:/tmp/slideconfirm_uploads
      - ./logs/backend:/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - snapcheck_snapcheck-net
      - traefik_proxy  # ‚Üê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Traefik —Å–µ—Ç–∏
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # ‚úÖ Traefik –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è backend
      - "traefik.enable=true"
      - "traefik.http.routers.snapcheck-backend.rule=Host(`${DOMAIN:-lms.it-uae.com}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.snapcheck-backend.entrypoints=websecure"
      - "traefik.http.routers.snapcheck-backend.tls.certresolver=myresolver"
      - "traefik.http.services.snapcheck-backend.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
      - "traefik.http.routers.snapcheck-backend.middlewares=api-strip"
      - "traefik.http.routers.snapcheck-backend.priority=100"

  # üåê Frontend (React + Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: snapcheck-frontend
    restart: always
    networks:
      - snapcheck_snapcheck-net
      - traefik_proxy  # ‚Üê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Traefik —Å–µ—Ç–∏
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      # ‚úÖ Traefik –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è frontend
      - "traefik.enable=true"
      - "traefik.http.routers.snapcheck-frontend.rule=Host(`${DOMAIN:-lms.it-uae.com}`)"
      - "traefik.http.routers.snapcheck-frontend.entrypoints=websecure"
      - "traefik.http.routers.snapcheck-frontend.tls.certresolver=myresolver"
      - "traefik.http.services.snapcheck-frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik_proxy"

networks:
  snapcheck_snapcheck-net:
    driver: bridge
  traefik_proxy:
    external: true  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç—å Traefik

volumes:
  db_data:
    driver: local
