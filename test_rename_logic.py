#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–ª–∞–π–¥–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã
"""

import os
import re
import tempfile
from pathlib import Path
from PIL import Image

def test_file_filtering():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –Ω–∞ frontend'–µ)"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    with tempfile.TemporaryDirectory() as tmpdir:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = {
            'Slide1.jpeg': 'valid',
            'slide2.jpg': 'valid',
            'SLIDE3.JPG': 'valid',
            'photo1.jpg': 'invalid',  # –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "slide"
            'image_2.jpg': 'invalid',  # –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "slide"
            'slide3.png': 'invalid',  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            'slide_4.jpg': 'valid',  # —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º - OK
        }
        
        for filename in test_files.keys():
            filepath = os.path.join(tmpdir, filename)
            img = Image.new('RGB', (100, 100), color='red')
            img.save(filepath)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞–∫ –Ω–∞ frontend'–µ
        files = os.listdir(tmpdir)
        print(f"\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ ({len(files)}):")
        for f in sorted(files):
            print(f"  - {f}")
        
        # –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–µ
        slide_files = []
        for f in files:
            name = f.lower()
            is_image = name.endswith('.jpg') or name.endswith('.jpeg')
            is_slide = name.startswith('slide')
            
            if is_image and is_slide:
                slide_files.append(f)
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–∞–π–¥—ã ({len(slide_files)}):")
        for f in sorted(slide_files):
            expected = test_files[f]
            print(f"  ‚úì {f} (type: {expected})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        expected_valid = [f for f, t in test_files.items() if t == 'valid']
        found_valid = sorted(slide_files)
        
        if sorted(expected_valid) == sorted(found_valid):
            print("\nüéâ –£–°–ü–ï–•: –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            return True
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–∏—Å—å {expected_valid}, –ø–æ–ª—É—á–µ–Ω—ã {found_valid}")
            return False


def test_file_sorting():
    """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º")
    print("=" * 60)
    
    test_cases = [
        {
            'input': ['slide3.jpg', 'slide1.jpg', 'slide2.jpg'],
            'expected': ['slide1.jpg', 'slide2.jpg', 'slide3.jpg'],
        },
        {
            'input': ['Slide10.jpeg', 'Slide2.jpg', 'slide1.jpg'],
            'expected': ['slide1.jpg', 'Slide2.jpg', 'Slide10.jpeg'],
        },
        {
            'input': ['slide_5.jpg', 'slide-1.jpg', 'slide 3.jpg'],
            'expected': ['slide-1.jpg', 'slide 3.jpg', 'slide_5.jpg'],
        },
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìå –¢–µ—Å—Ç-–∫–µ–π—Å {i}:")
        files = test_case['input']
        expected = test_case['expected']
        
        print(f"  –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {files}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –Ω–∞ frontend'–µ
        sorted_files = sorted(files, key=lambda x: int(re.search(r'\d+', x).group(0)) if re.search(r'\d+', x) else 0)
        
        print(f"  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {sorted_files}")
        print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
        
        if sorted_files == expected:
            print(f"  ‚úÖ –£–°–ü–ï–•")
        else:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê")
            return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    return True


def test_file_renaming():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 3: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    
    test_files = [
        'Slide1.JPEG',
        'slide2.jpg',
        'SLIDE3.jpeg',
    ]
    
    print(f"\nüìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ {len(test_files)} —Ñ–∞–π–ª–æ–≤:\n")
    
    for index, filename in enumerate(test_files, 1):
        new_filename = f"slide{index}.jpg"
        print(f"  {index}. {filename:20} ‚Üí {new_filename}")
    
    print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    return True


def test_backend_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –Ω–∞ backend'–µ"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ backend'–µ")
    print("=" * 60)
    
    regex = r'^slide(\d+)\.(jpg|jpeg)$'
    
    test_cases = [
        ('slide1.jpg', True, 1),
        ('slide2.jpeg', True, 2),
        ('slide3.JPG', True, 3),  # case-insensitive
        ('slide4.JPEG', True, 4),  # case-insensitive
        ('slide.jpg', False, None),  # –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞
        ('slide10.png', False, None),  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        ('photo1.jpg', False, None),  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
    ]
    
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ regex: {regex}\n")
    
    all_passed = True
    for filename, should_match, expected_num in test_cases:
        match = re.match(regex, filename.lower())
        
        if should_match:
            if match:
                num = int(match.group(1))
                status = "‚úÖ OK" if num == expected_num else "‚ùå –û–®–ò–ë–ö–ê (–Ω–æ–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)"
                print(f"  ‚úì {filename:20} ‚Üí –ù–∞–π–¥–µ–Ω —Å–ª–∞–π–¥ #{num} {status}")
            else:
                print(f"  ‚úó {filename:20} ‚Üí ‚ùå –û–®–ò–ë–ö–ê (–¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–æ–π—Ç–∏)")
                all_passed = False
        else:
            if match:
                print(f"  ‚úó {filename:20} ‚Üí ‚ùå –û–®–ò–ë–ö–ê (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–æ–π—Ç–∏)")
                all_passed = False
            else:
                print(f"  ‚úó {filename:20} ‚Üí ‚úÖ OK (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
    
    if all_passed:
        print("\nüéâ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    return all_passed


def test_sequence_validation():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    test_cases = [
        {
            'input': [1, 2, 3],
            'valid': True,
            'desc': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1,2,3'
        },
        {
            'input': [1, 3],
            'valid': False,
            'desc': '–ü—Ä–æ–ø—É—â–µ–Ω —Å–ª–∞–π–¥ 2'
        },
        {
            'input': [2, 3, 4],
            'valid': False,
            'desc': '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 2 –≤–º–µ—Å—Ç–æ 1'
        },
        {
            'input': [1],
            'valid': True,
            'desc': '–û–¥–∏–Ω —Å–ª–∞–π–¥'
        },
    ]
    
    print()
    all_passed = True
    
    for test_case in test_cases:
        numbers = test_case['input']
        should_be_valid = test_case['valid']
        desc = test_case['desc']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid = all(numbers[i] == i + 1 for i in range(len(numbers)))
        
        status = "‚úÖ OK" if is_valid == should_be_valid else "‚ùå –û–®–ò–ë–ö–ê"
        validation = "‚úì –í–∞–ª–∏–¥–Ω–æ" if is_valid else "‚úó –ù–µ–≤–∞–ª–∏–¥–Ω–æ"
        
        print(f"  –°–ª–∞–π–¥—ã {numbers}: {validation} - {desc} {status}")
        
        if is_valid != should_be_valid:
            all_passed = False
    
    if all_passed:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏!")
    
    return all_passed


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n")
    print("‚ïî" + "‚ïê" * 58 + "‚ïó")
    print("‚ïë" + " " * 10 + "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í" + " " * 2 + "‚ïë")
    print("‚ïö" + "‚ïê" * 58 + "‚ïù")
    
    results = []
    
    try:
        results.append(("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤", test_file_filtering()))
        results.append(("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º", test_file_sorting()))
        results.append(("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", test_file_renaming()))
        results.append(("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ backend'–µ", test_backend_validation()))
        results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_sequence_validation()))
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"  {test_name:35} {status}")
    
    all_passed = all(result for _, result in results)
    
    print("\n" + "=" * 60)
    if all_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("=" * 60)
        return False


if __name__ == '__main__':
    success = main()
    exit(0 if success else 1)
