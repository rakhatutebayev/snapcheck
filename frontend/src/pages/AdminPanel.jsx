import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Upload, Users, LogOut, AlertCircle, CheckCircle, Trash2, FileUp, Play, X, Edit2, Save } from 'lucide-react';

const AdminPanel = () => {
  const [activeTab, setActiveTab] = useState('presentations');
  const [file, setFile] = useState(null);
  const [users, setUsers] = useState([]);
  const [presentations, setPresentations] = useState([]);
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);
  const [publishingId, setPublishingId] = useState(null);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [presentationTitle, setPresentationTitle] = useState('');
  const [newUser, setNewUser] = useState({
    first_name: '',
    last_name: '',
    email: '',
    password: '',
    role: 'user'
  });
  
  // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–∞–π–¥–æ–≤
  const [selectedPresentation, setSelectedPresentation] = useState(null);
  const [slides, setSlides] = useState([]);
  const [editingSlideId, setEditingSlideId] = useState(null);
  const [editingSlideTitle, setEditingSlideTitle] = useState('');
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);
  
  // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏ —Å–æ —Å–ª–∞–π–¥–∞–º–∏
  const [checkedSlides, setCheckedSlides] = useState([]);
  const [selectedFolderPath, setSelectedFolderPath] = useState('');
  const folderInputRef = useRef(null);
  
  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç—á—ë—Ç–µ
  const [reportFilter, setReportFilter] = useState(null); // null, 'all', 'completed', 'pending'
  const [filteredReportUsers, setFilteredReportUsers] = useState([]);
  
  const navigate = useNavigate();

  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–æ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!token || role !== 'admin') {
      navigate('/login');
    }
  }, [token, role, navigate]);

  useEffect(() => {
    if (activeTab === 'presentations') {
      fetchPresentations();
    } else if (activeTab === 'users') {
      fetchUsers();
    } else if (activeTab === 'report') {
      fetchReport();
    }
  }, [activeTab]);

  const fetchUsers = async () => {
    if (!token) {
      navigate('/login');
      return;
    }
    try {
      const response = await axios.get('/admin/users', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setUsers(response.data.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
      if (err.response?.status === 401 || err.response?.status === 403) {
        navigate('/login');
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }
    }
  };

  const fetchPresentations = async () => {
    if (!token) {
      navigate('/login');
      return;
    }
    try {
      const response = await axios.get('/admin/presentations', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setPresentations(response.data.data);
      setSelectedPresentation(null);
      setSlides([]);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π:', err);
      if (err.response?.status === 401 || err.response?.status === 403) {
        navigate('/login');
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π');
      }
    }
  };

  const fetchSlides = async (presentationId) => {
    try {
      const response = await axios.get(`/admin/slides/${presentationId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setSlides(response.data.data);
      setSelectedPresentation(presentationId);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–∞–π–¥–æ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–∞–π–¥–æ–≤');
    }
  };

  const handlePublish = async (presentationId) => {
    setPublishingId(presentationId);
    setError('');
    setSuccess('');
    
    try {
      await axios.post(`/admin/presentations/${presentationId}/publish`, {}, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setSuccess('‚úì –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞');
      fetchPresentations();
    } catch (err) {
      setError(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    } finally {
      setPublishingId(null);
    }
  };

  const handleUnpublish = async (presentationId) => {
    setError('');
    setSuccess('');
    
    try {
      await axios.post(`/admin/presentations/${presentationId}/unpublish`, {}, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setSuccess('‚úì –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö');
      fetchPresentations();
    } catch (err) {
      setError(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
  };

  const handleDeletePresentation = async (presentationId) => {
    setShowDeleteConfirm(null);
    setError('');
    setSuccess('');
    
    try {
      await axios.delete(`/admin/presentations/${presentationId}?confirm=true`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setSuccess('‚úì –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∏ –≤—Å–µ –µ–µ —Å–ª–∞–π–¥—ã —É–¥–∞–ª–µ–Ω—ã');
      fetchPresentations();
    } catch (err) {
      setError(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏');
    }
  };

  const handleUpdateSlideTitle = async (slideId, newTitle) => {
    try {
      await axios.put(`/admin/slides/${slideId}/title`, { title: newTitle }, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setSuccess('‚úì –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      setEditingSlideId(null);
      fetchSlides(selectedPresentation);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–∞–π–¥–∞');
    }
  };

  const fetchReport = async () => {
    if (!token) {
      navigate('/login');
      return;
    }
    try {
      const response = await axios.get('/admin/report', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      setReport(response.data.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞:', err);
      if (err.response?.status === 401 || err.response?.status === 403) {
        navigate('/login');
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞');
      }
    }
  };

  const handleFolderSelect = async (e) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    console.log('–í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:', Array.from(files).map(f => f.name));

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ —Å–ª–∞–π–¥–∞–º–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥–∏–±–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º: –ª—é–±—ã–µ —Ñ–∞–π–ª—ã .jpg/.jpeg, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "slide", –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã
    const slideFiles = Array.from(files).filter(f => {
      const name = f.name.toLowerCase();
      const isImageFile = name.endsWith('.jpg') || name.endsWith('.jpeg');
      const isSlideFile = name.startsWith('slide');
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è slide*, –ª–∏–±–æ —ç—Ç–æ JPG —Ñ–∞–π–ª—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∏–º–µ–Ω–∏
      return isImageFile && isSlideFile;
    }).sort((a, b) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const numA = parseInt(a.name.match(/\d+/)?.[0]) || 0;
      const numB = parseInt(b.name.match(/\d+/)?.[0]) || 0;
      return numA - numB;
    });

    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–∞–π–¥—ã:', slideFiles.map(f => f.name));

    if (slideFiles.length === 0) {
      const allFiles = Array.from(files).map(f => f.name).join(', ');
      setError(`–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã JPG —Å–ª–∞–π–¥—ã. –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "slide" –∏ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .jpeg\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${allFiles}`);
      setCheckedSlides([]);
      setSelectedFolderPath('');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const firstFile = slideFiles[0];
    let folderPath = firstFile.webkitRelativePath.split('/')[0];
    if (firstFile.webkitRelativePath.includes('/')) {
      folderPath = firstFile.webkitRelativePath.split('/').slice(0, -1).join('/');
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–∞–π–¥–∞—Ö
    // Frontend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ—Ç –∏—Ö –≤ slide1.jpg, slide2.jpg, –∏ —Ç.–¥.
    const slidesData = slideFiles.map((file, index) => ({
      filename: file.name,
      order: index + 1,
      size: file.size,
      file: file
    }));

    setSelectedFolderPath(folderPath);
    setCheckedSlides(slidesData);
    setSuccess(`‚úì –ù–∞–π–¥–µ–Ω–æ ${slidesData.length} —Å–ª–∞–π–¥–æ–≤`);
    setError('');
  };

  const handleUploadSlidesFromFolder = async (e) => {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    if (!checkedSlides || checkedSlides.length === 0) {
      setError('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å–æ —Å–ª–∞–π–¥–∞–º–∏! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìÅ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"');
      setSuccess('');
      return;
    }
    
    if (!presentationTitle || !presentationTitle.trim()) {
      setError('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏!');
      setSuccess('');
      return;
    }

    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: ${checkedSlides.length} —Å–ª–∞–π–¥–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–µ: "${presentationTitle}"`);
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
      const formData = new FormData();
      formData.append('presentation_title', presentationTitle);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–ª–∞–π–¥–æ–≤ —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
      console.log('–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã (—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º):');
      checkedSlides.forEach((slide, index) => {
        const newFilename = `slide${index + 1}.jpg`;  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ slide1.jpg, slide2.jpg, ...
        console.log(`  ${index + 1}. ${slide.filename} ‚Üí ${newFilename}`);
        formData.append('slides', slide.file, newFilename);
      });

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const response = await axios.post('/admin/slides/upload-from-files', formData, {
        headers: { 
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      setSuccess(`‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –í—Å–µ–≥–æ —Å–ª–∞–π–¥–æ–≤: ${response.data.slides_count}`);
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setPresentationTitle('');
      setCheckedSlides([]);
      setSelectedFolderPath('');
      if (folderInputRef.current) {
        folderInputRef.current.value = '';
      }
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
      setTimeout(() => fetchPresentations(), 1000);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      const errorMsg = err.response?.data?.detail || err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–∞–π–¥–æ–≤';
      setError(`‚ùå ${errorMsg}`);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateUser = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      await axios.post(
        '/admin/create_user',
        null,
        {
          params: newUser,
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );
      setSuccess('‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
      setNewUser({ first_name: '', last_name: '', email: '', password: '', role: 'user' });
      fetchUsers();
    } catch (err) {
      setError(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setLoading(false);
    }
  };

  const handleSetRole = async (userId, newRole) => {
    try {
      await axios.put(
        `/admin/set_role/${userId}`,
        null,
        {
          params: { role: newRole },
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );
      setSuccess('‚úì –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      fetchUsers();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏');
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-purple-100 px-4 py-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-4xl font-bold text-gray-900">üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h1>
          <button
            onClick={handleLogout}
            className="flex items-center gap-2 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition"
          >
            <LogOut size={18} />
            –í—ã—Ö–æ–¥
          </button>
        </div>

        {/* Messages */}
        {error && (
          <div className="mb-6 flex items-center gap-3 p-4 bg-red-50 border border-red-200 rounded-lg">
            <AlertCircle className="text-red-600" size={20} />
            <p className="text-red-700">{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-6 flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg">
            <CheckCircle className="text-green-600" size={20} />
            <p className="text-green-700">{success}</p>
          </div>
        )}

        {/* Tabs */}
        <div className="flex gap-4 mb-8 border-b border-gray-200">
          {['presentations', 'upload', 'users', 'report'].map(tab => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-6 py-3 font-semibold border-b-2 transition ${
                activeTab === tab
                  ? 'text-blue-600 border-blue-600'
                  : 'text-gray-600 border-transparent hover:text-gray-900'
              }`}
            >
              {tab === 'presentations' && <span>üìÅ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</span>}
              {tab === 'upload' && <span>üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å</span>}
              {tab === 'users' && <span>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</span>}
              {tab === 'report' && <span>üìä –û—Ç—á–µ—Ç</span>}
            </button>
          ))}
        </div>

        {/* Presentations Tab */}
        {activeTab === 'presentations' && (
          <div className="space-y-8">
            {/* Presentations List */}
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</h2>
              {presentations.length === 0 ? (
                <p className="text-gray-500 text-center py-8">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π</p>
              ) : (
                <div className="space-y-4">
                  {presentations.map(presentation => (
                    <div key={presentation.id}>
                      <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:border-gray-300 transition">
                        <div className="flex-1 cursor-pointer" onClick={() => {
                          if (selectedPresentation === presentation.id) {
                            setSelectedPresentation(null);
                            setSlides([]);
                          } else {
                            fetchSlides(presentation.id);
                          }
                        }}>
                          <p className="font-semibold text-gray-900">{presentation.title}</p>
                          <p className="text-sm text-gray-600">
                            {presentation.status === 'draft' ? 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫' : '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞'}
                            {' ‚Ä¢ '}
                            {new Date(presentation.uploaded_at).toLocaleString('ru-RU')}
                          </p>
                        </div>
                        <div className="flex gap-2">
                          {presentation.status === 'draft' && (
                            <button
                              onClick={() => handlePublish(presentation.id)}
                              disabled={publishingId === presentation.id}
                              className="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition disabled:opacity-50"
                            >
                              <Play size={18} />
                              {publishingId === presentation.id ? '–ü—É–±–ª–∏–∫–∞—Ü–∏—è...' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                            </button>
                          )}
                          {presentation.status === 'published' && (
                            <button
                              onClick={() => handleUnpublish(presentation.id)}
                              className="flex items-center gap-2 bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition"
                            >
                              –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            </button>
                          )}
                          <button
                            onClick={() => setShowDeleteConfirm(presentation.id)}
                            className="flex items-center gap-2 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition"
                          >
                            <Trash2 size={18} />
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </div>

                      {/* Slides Editor */}
                      {selectedPresentation === presentation.id && slides.length > 0 && (
                        <div className="mt-4 ml-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                          <h3 className="font-semibold text-gray-900 mb-4">–°–ª–∞–π–¥—ã ({slides.length})</h3>
                          <div className="space-y-3">
                            {slides.map(slide => (
                              <div key={slide.id} className="flex items-center gap-3 p-3 bg-white rounded border border-gray-200">
                                <div className="w-12 h-12 bg-gray-300 rounded flex items-center justify-center text-sm font-semibold text-gray-700">
                                  {slide.order}
                                </div>
                                {editingSlideId === slide.id ? (
                                  <div className="flex-1 flex gap-2">
                                    <input
                                      type="text"
                                      value={editingSlideTitle}
                                      onChange={(e) => setEditingSlideTitle(e.target.value)}
                                      className="flex-1 px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                                      autoFocus
                                    />
                                    <button
                                      onClick={() => handleUpdateSlideTitle(slide.id, editingSlideTitle)}
                                      className="flex items-center gap-1 bg-green-600 text-white px-3 py-2 rounded hover:bg-green-700"
                                    >
                                      <Save size={16} />
                                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                    </button>
                                    <button
                                      onClick={() => setEditingSlideId(null)}
                                      className="flex items-center gap-1 bg-gray-400 text-white px-3 py-2 rounded hover:bg-gray-500"
                                    >
                                      <X size={16} />
                                      –û—Ç–º–µ–Ω–∞
                                    </button>
                                  </div>
                                ) : (
                                  <div className="flex-1 flex items-center justify-between">
                                    <p className="text-gray-800">{slide.title || '–°–ª–∞–π–¥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</p>
                                    <button
                                      onClick={() => {
                                        setEditingSlideId(slide.id);
                                        setEditingSlideTitle(slide.title || '');
                                      }}
                                      className="flex items-center gap-1 text-blue-600 hover:text-blue-700"
                                    >
                                      <Edit2 size={16} />
                                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Delete Confirmation Modal */}
                      {showDeleteConfirm === presentation.id && (
                        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                          <div className="bg-white rounded-lg p-6 max-w-md mx-4 shadow-2xl">
                            <h3 className="text-xl font-bold text-gray-900 mb-4">–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é?</h3>
                            <p className="text-gray-700 mb-6">
                              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "{presentation.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–ª–∞–π–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ.
                            </p>
                            <div className="flex gap-3 justify-end">
                              <button
                                onClick={() => setShowDeleteConfirm(null)}
                                className="px-4 py-2 bg-gray-300 text-gray-900 rounded hover:bg-gray-400 transition"
                              >
                                –û—Ç–º–µ–Ω–∞
                              </button>
                              <button
                                onClick={() => handleDeletePresentation(presentation.id)}
                                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition"
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Upload Tab */}
        {activeTab === 'upload' && (
          <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–∞–π–¥—ã –∏–∑ –ø–∞–ø–∫–∏</h2>
            <form onSubmit={handleUploadSlidesFromFolder} className="space-y-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å–æ —Å–ª–∞–π–¥–∞–º–∏</label>
                <input
                  ref={folderInputRef}
                  type="file"
                  webkitdirectory="true"
                  mozdirectory="true"
                  onChange={handleFolderSelect}
                  className="hidden"
                  id="folder-input"
                />
                <label 
                  htmlFor="folder-input"
                  className="block w-full px-6 py-4 border-2 border-dashed border-blue-300 rounded-lg bg-blue-50 hover:bg-blue-100 hover:border-blue-400 transition cursor-pointer text-center"
                >
                  <div className="text-4xl mb-2">üìÅ</div>
                  <p className="font-semibold text-blue-600">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏</p>
                  <p className="text-sm text-gray-600 mt-1">–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–∞–ø–∫—É —Å—é–¥–∞</p>
                  {selectedFolderPath && (
                    <p className="text-xs text-green-600 mt-2">‚úì –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {selectedFolderPath}</p>
                  )}
                </label>
              </div>

              {/* Preview of found slides */}
              {checkedSlides.length > 0 && (
                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <h3 className="font-semibold text-gray-900 mb-3">‚úì –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–∞–π–¥—ã ({checkedSlides.length}):</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                    {checkedSlides.slice(0, 12).map(slide => (
                      <div key={slide.filename} className="p-2 bg-white rounded border border-blue-200 text-center text-sm">
                        <div className="font-semibold text-blue-600">#{slide.order}</div>
                        <div className="text-xs text-gray-500">{(slide.size / 1024).toFixed(1)} KB</div>
                      </div>
                    ))}
                  </div>
                  {checkedSlides.length > 12 && (
                    <div className="text-xs text-gray-500 mt-2">... –∏ –µ—â—ë {checkedSlides.length - 12} —Å–ª–∞–π–¥–æ–≤</div>
                  )}
                </div>
              )}

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</label>
                <input
                  type="text"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì—Ä–∞–º–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≥—Ä–∞–º–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–∫—Ç–µ—Ä–∏–∏"
                  value={presentationTitle}
                  onChange={(e) => setPresentationTitle(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <button
                type="submit"
                disabled={loading}
                className={`w-full font-semibold py-3 rounded-lg transition ${
                  loading 
                    ? 'bg-gray-400 text-white cursor-not-allowed opacity-50'
                    : checkedSlides.length > 0
                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white hover:from-green-700 hover:to-green-800'
                    : 'bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800'
                }`}
              >
                {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : checkedSlides.length > 0 ? `‚úì –ó–∞–≥—Ä—É–∑–∏—Ç—å ${checkedSlides.length} —Å–ª–∞–π–¥–æ–≤` : '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'}
              </button>
            </form>

            <div className="mt-8 p-6 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h3 className="font-semibold text-gray-900 mb-3">üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h3>
              <ol className="text-sm text-gray-700 space-y-2 list-decimal list-inside">
                <li>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à PPTX —Ñ–∞–π–ª –≤ JPG —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—è –≤–Ω–µ—à–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä LibreOffice, Python-pptx –∏–ª–∏ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä)</li>
                <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ JPG —Ñ–∞–π–ª—ã –≤ –æ–¥–Ω—É –ø–∞–ø–∫—É –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ</li>
                <li>–ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ: <code className="bg-white px-2 py-1 rounded text-xs">slide1.jpg</code>, <code className="bg-white px-2 py-1 rounded text-xs">slide2.jpg</code>, –∏ —Ç.–¥.</li>
                <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"</li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å–æ —Å–ª–∞–π–¥–∞–º–∏ (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–Ω–∏–∫/Finder)</li>
                <li>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–∞–π–¥—ã"</li>
              </ol>
            </div>

            <div className="mt-6 p-6 bg-purple-50 border border-purple-200 rounded-lg">
              <h3 className="font-semibold text-gray-900 mb-3">üí° –ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –û–°:</h3>
              <div className="space-y-2 text-sm font-mono text-gray-700">
                <div><strong>macOS:</strong> /Users/john/Documents/presentation_slides</div>
                <div><strong>Windows:</strong> C:\Users\john\Documents\presentation_slides</div>
                <div><strong>Linux:</strong> /home/john/presentation_slides</div>
              </div>
            </div>
          </div>
        )}

        {/* Users Tab */}
        {activeTab === 'users' && (
          <div className="space-y-8">
            {/* Create User Form */}
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
              <form onSubmit={handleCreateUser} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <input
                    type="text"
                    placeholder="–ò–º—è"
                    value={newUser.first_name}
                    onChange={(e) => setNewUser({ ...newUser, first_name: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                  <input
                    type="text"
                    placeholder="–§–∞–º–∏–ª–∏—è"
                    value={newUser.last_name}
                    onChange={(e) => setNewUser({ ...newUser, last_name: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <input
                  type="email"
                  placeholder="Email"
                  value={newUser.email}
                  onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
                <input
                  type="password"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  value={newUser.password}
                  onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
                <select
                  value={newUser.role}
                  onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                  <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
                <button
                  type="submit"
                  disabled={loading}
                  className="w-full bg-green-600 text-white font-semibold py-2 rounded-lg hover:bg-green-700 transition disabled:opacity-50"
                >
                  {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                </button>
              </form>
            </div>

            {/* Users List */}
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-2 border-gray-200">
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">–ò–º—è</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Email</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">–†–æ–ª—å</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {users.map(user => (
                      <tr key={user.id} className="border-b border-gray-100 hover:bg-gray-50">
                        <td className="py-3 px-4">{user.first_name} {user.last_name}</td>
                        <td className="py-3 px-4">{user.email}</td>
                        <td className="py-3 px-4">
                          <span className={`px-3 py-1 rounded-full font-semibold ${
                            user.role === 'admin' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700'
                          }`}>
                            {user.role === 'admin' ? 'üë®‚Äçüíº Admin' : 'üë§ User'}
                          </span>
                        </td>
                        <td className="py-3 px-4 space-x-2">
                          {user.role !== 'admin' && (
                            <button
                              onClick={() => handleSetRole(user.id, 'admin')}
                              className="text-blue-600 hover:text-blue-700 font-semibold"
                            >
                              –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º
                            </button>
                          )}
                          {user.role === 'admin' && (
                            <button
                              onClick={() => handleSetRole(user.id, 'user')}
                              className="text-gray-600 hover:text-gray-700 font-semibold"
                            >
                              –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* Report Tab */}
        {activeTab === 'report' && (
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">–û—Ç—á–µ—Ç –æ–± –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–∏</h2>
            {report && (
              <>
                {/* Stat Cards */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                  <div 
                    onClick={() => setReportFilter(reportFilter === 'all' ? null : 'all')}
                    className={`rounded-lg p-6 border-2 cursor-pointer transition ${
                      reportFilter === 'all' 
                        ? 'bg-blue-100 border-blue-500' 
                        : 'bg-blue-50 border-blue-200 hover:border-blue-400'
                    }`}
                  >
                    <p className="text-gray-600 text-sm font-semibold mb-2">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    <p className="text-3xl font-bold text-blue-600">{report.total_users}</p>
                  </div>
                  
                  <div 
                    onClick={() => setReportFilter(reportFilter === 'completed' ? null : 'completed')}
                    className={`rounded-lg p-6 border-2 cursor-pointer transition ${
                      reportFilter === 'completed' 
                        ? 'bg-green-100 border-green-500' 
                        : 'bg-green-50 border-green-200 hover:border-green-400'
                    }`}
                  >
                    <p className="text-gray-600 text-sm font-semibold mb-2">–ó–∞–≤–µ—Ä—à–∏–ª–∏</p>
                    <p className="text-3xl font-bold text-green-600">{report.completed}</p>
                  </div>
                  
                  <div 
                    onClick={() => setReportFilter(reportFilter === 'pending' ? null : 'pending')}
                    className={`rounded-lg p-6 border-2 cursor-pointer transition ${
                      reportFilter === 'pending' 
                        ? 'bg-yellow-100 border-yellow-500' 
                        : 'bg-yellow-50 border-yellow-200 hover:border-yellow-400'
                    }`}
                  >
                    <p className="text-gray-600 text-sm font-semibold mb-2">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</p>
                    <p className="text-3xl font-bold text-yellow-600">{report.pending}</p>
                  </div>
                  
                  <div className="bg-purple-50 rounded-lg p-6 border border-purple-200">
                    <p className="text-gray-600 text-sm font-semibold mb-2">–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</p>
                    <p className="text-3xl font-bold text-purple-600">{Math.round(report.completion_percentage)}%</p>
                  </div>
                </div>

                {/* Filtered Users List */}
                {reportFilter && (
                  <div className="mt-8">
                    <h3 className="text-xl font-bold text-gray-900 mb-4">
                      {reportFilter === 'all' && '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}
                      {reportFilter === 'completed' && '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ'}
                      {reportFilter === 'pending' && '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                    </h3>
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b-2 border-gray-300">
                            <th className="text-left py-3 px-4 font-semibold text-gray-700">–§–ò–û</th>
                            <th className="text-left py-3 px-4 font-semibold text-gray-700">Email</th>
                            <th className="text-left py-3 px-4 font-semibold text-gray-700">–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π</th>
                            <th className="text-left py-3 px-4 font-semibold text-gray-700">–°—Ç–∞—Ç—É—Å</th>
                          </tr>
                        </thead>
                        <tbody>
                          {report.users
                            .filter(user => {
                              if (reportFilter === 'all') return true;
                              if (reportFilter === 'completed') return user.is_completed;
                              if (reportFilter === 'pending') return !user.is_completed;
                              return false;
                            })
                            .map(user => (
                              <tr key={user.id} className="border-b border-gray-200 hover:bg-gray-50">
                                <td className="py-3 px-4 text-gray-800">
                                  {user.first_name} {user.last_name}
                                </td>
                                <td className="py-3 px-4 text-gray-600">{user.email}</td>
                                <td className="py-3 px-4 text-gray-800 font-semibold">{user.completion_count}</td>
                                <td className="py-3 px-4">
                                  {user.is_completed ? (
                                    <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-semibold">
                                      ‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ
                                    </span>
                                  ) : (
                                    <span className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-semibold">
                                      ‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                                    </span>
                                  )}
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPanel;
